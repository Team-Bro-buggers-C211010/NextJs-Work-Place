## Data fetching in App Router

So far, we've been working with hard-coded content in our routes and components

In actual enterprise apps, you're usually pulling data from external sources

The App Router is built on React Server Components (RSC) architecture which
gives us the flexibility to fetch data using either server components or client
components

=> It's usually preferable to use server components for data operations because:

- You can directly communicate with your databases and file systems on the
server side
- You get better performance since you're closer to your data sources
- Your client-side bundle stays lean because the heavy lifting happens
server-side
- Your sensitive operations and API keys remain secure on the server



=> Fetching data with Server Components

The RSC architecture supports async and await keywords in Server Components

This means we can write our data fetching code just like regular JavaScript, using
async functions coupled with the await keyword

=> Request memoization

- This means you can fetch data wherever you need it in your component tree
without worrying about duplicate network requests

- React will only make the actual fetch once and reuse the result for subsequent
calls during the same render pass

- It's a React feature and thereby included in Next.js

- Lets you write data-fetching code exactly where you need it rather than having to
centralize fetches and pass data down through propsReact will only make the actual fetch once and reuse the result for subsequent
calls during the same render pass


# Loading and Error states (Server Side)

While client components require you to manage these states with separate
variables and conditional rendering, server components make this process much
cleaner

To implement a loading state, all we need to do is define and export a React
component in loading.tsx

For handling errors, define and export a React component in error.tsx


## Data fetching patterns

When fetching data inside components, you need to be aware of two data fetching
patterns:

1. Sequential
2. Parallel

=> Sequential: requests in a component tree are dependent on each other. This can
lead to longer loading times.

# Sequential fetching

We'll create a Posts component

- fetches all posts
- for each post, fetch author using the userld property
- example of sequential fetching because we need the userld from each post
before we can fetch its author
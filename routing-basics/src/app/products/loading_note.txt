
===========================================
ðŸ§  Notes on `loading.tsx` in Next.js App Router
===========================================

In Next.js (App Router), `loading.tsx` is a special file used to show a **loading UI** when a route or component is loading â€” especially useful for slow or dynamic content.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ”¹ What is `loading.tsx`?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

- Itâ€™s a React component that renders **while your page, layout, or template is loading**.
- Useful for showing **spinners, skeletons, or placeholders**.
- Automatically shown when:
  - A dynamic segment is loading
  - A server component is waiting for data

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ… Basic Usage:
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Folder structure:

app/
  dashboard/
    page.tsx
    loading.tsx

`loading.tsx`:

```tsx
export default function Loading() {
  return <p>Loading dashboard...</p>;
}
```

ðŸ“Œ When the `dashboard/page.tsx` takes time to render (e.g., due to `await` or dynamic import), this loading component is shown automatically.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ’¡ Where Can You Use It?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

- Inside any route segment:
  - `app/products/loading.tsx`
  - `app/blog/[slug]/loading.tsx`
- Also inside layouts:
  - `app/(admin)/layout.tsx` â†’ `loading.tsx` here wraps all child routes

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ“Œ Behavior
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

- Shown **during initial load or transition**
- Automatically **replaced with the final content**
- React state inside `loading.tsx` is local (isolated)
- You can **customize separately per route**

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ§© Example with Fetching
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

If `page.tsx` uses `await` to fetch data:

```tsx
// app/posts/page.tsx

export default async function PostsPage() {
  const res = await fetch('https://api.example.com/posts');
  const posts = await res.json();

  return <PostList posts={posts} />;
}
```

Then this will trigger:

```tsx
// app/posts/loading.tsx

export default function Loading() {
  return <SkeletonPostList />;
}
```

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ“š Summary
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

âœ… File: `loading.tsx`  
âœ… Automatically used during async rendering  
âœ… Can exist in any segment (`app/x/loading.tsx`)  
âœ… Great for user experience: shows visual feedback  
âœ… Combine with skeletons, spinners, shimmer effects, etc.

ðŸŽ¯ Perfect for improving perceived performance in SSR, dynamic fetch, and suspense loading.
